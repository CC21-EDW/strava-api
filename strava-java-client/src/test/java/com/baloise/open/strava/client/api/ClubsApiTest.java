/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baloise.open.strava.client.api;

import com.baloise.open.strava.client.model.DetailedClubDto;
import com.baloise.open.strava.client.model.FaultDto;
import com.baloise.open.strava.client.model.SummaryActivityDto;
import com.baloise.open.strava.client.model.SummaryAthleteDto;
import com.baloise.open.strava.client.model.SummaryClubDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClubsApi
 */
@Ignore
public class ClubsApiTest {

    private final ClubsApi api = new ClubsApi();

    
    /**
     * List Club Activities
     *
     * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClubActivitiesByIdTest() {
        Long id = null;
        Integer page = null;
        Integer perPage = null;
        List<SummaryActivityDto> response = api.getClubActivitiesById(id, page, perPage);

        // TODO: test validations
    }
    
    /**
     * List Club Administrators
     *
     * Returns a list of the administrators of a given club.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClubAdminsByIdTest() {
        Long id = null;
        Integer page = null;
        Integer perPage = null;
        List<SummaryAthleteDto> response = api.getClubAdminsById(id, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get Club
     *
     * Returns a given club using its identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClubByIdTest() {
        Long id = null;
        DetailedClubDto response = api.getClubById(id);

        // TODO: test validations
    }
    
    /**
     * List Club Members
     *
     * Returns a list of the athletes who are members of a given club.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClubMembersByIdTest() {
        Long id = null;
        Integer page = null;
        Integer perPage = null;
        List<SummaryAthleteDto> response = api.getClubMembersById(id, page, perPage);

        // TODO: test validations
    }
    
    /**
     * List Athlete Clubs
     *
     * Returns a list of the clubs whose membership includes the authenticated athlete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoggedInAthleteClubsTest() {
        Integer page = null;
        Integer perPage = null;
        List<SummaryClubDto> response = api.getLoggedInAthleteClubs(page, perPage);

        // TODO: test validations
    }
    
}
