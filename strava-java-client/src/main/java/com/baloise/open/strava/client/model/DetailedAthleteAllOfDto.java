/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baloise.open.strava.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.baloise.open.strava.client.model.SummaryClubDto;
import com.baloise.open.strava.client.model.SummaryGearDto;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DetailedAthleteAllOfDto
 */
@JsonPropertyOrder({
  DetailedAthleteAllOfDto.JSON_PROPERTY_FOLLOWER_COUNT,
  DetailedAthleteAllOfDto.JSON_PROPERTY_FRIEND_COUNT,
  DetailedAthleteAllOfDto.JSON_PROPERTY_MEASUREMENT_PREFERENCE,
  DetailedAthleteAllOfDto.JSON_PROPERTY_FTP,
  DetailedAthleteAllOfDto.JSON_PROPERTY_WEIGHT,
  DetailedAthleteAllOfDto.JSON_PROPERTY_CLUBS,
  DetailedAthleteAllOfDto.JSON_PROPERTY_BIKES,
  DetailedAthleteAllOfDto.JSON_PROPERTY_SHOES
})
@JsonTypeName("DetailedAthlete_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-30T09:50:39.653673500+01:00[Europe/Zurich]")
public class DetailedAthleteAllOfDto {
  public static final String JSON_PROPERTY_FOLLOWER_COUNT = "follower_count";
  private Integer followerCount;

  public static final String JSON_PROPERTY_FRIEND_COUNT = "friend_count";
  private Integer friendCount;

  /**
   * The athlete&#39;s preferred unit system.
   */
  public enum MeasurementPreferenceEnum {
    FEET("feet"),
    
    METERS("meters");

    private String value;

    MeasurementPreferenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MeasurementPreferenceEnum fromValue(String value) {
      for (MeasurementPreferenceEnum b : MeasurementPreferenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MEASUREMENT_PREFERENCE = "measurement_preference";
  private MeasurementPreferenceEnum measurementPreference;

  public static final String JSON_PROPERTY_FTP = "ftp";
  private Integer ftp;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Float weight;

  public static final String JSON_PROPERTY_CLUBS = "clubs";
  private List<SummaryClubDto> clubs = null;

  public static final String JSON_PROPERTY_BIKES = "bikes";
  private List<SummaryGearDto> bikes = null;

  public static final String JSON_PROPERTY_SHOES = "shoes";
  private List<SummaryGearDto> shoes = null;


  public DetailedAthleteAllOfDto followerCount(Integer followerCount) {
    
    this.followerCount = followerCount;
    return this;
  }

   /**
   * The athlete&#39;s follower count.
   * @return followerCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's follower count.")
  @JsonProperty(JSON_PROPERTY_FOLLOWER_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFollowerCount() {
    return followerCount;
  }


  public void setFollowerCount(Integer followerCount) {
    this.followerCount = followerCount;
  }


  public DetailedAthleteAllOfDto friendCount(Integer friendCount) {
    
    this.friendCount = friendCount;
    return this;
  }

   /**
   * The athlete&#39;s friend count.
   * @return friendCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's friend count.")
  @JsonProperty(JSON_PROPERTY_FRIEND_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFriendCount() {
    return friendCount;
  }


  public void setFriendCount(Integer friendCount) {
    this.friendCount = friendCount;
  }


  public DetailedAthleteAllOfDto measurementPreference(MeasurementPreferenceEnum measurementPreference) {
    
    this.measurementPreference = measurementPreference;
    return this;
  }

   /**
   * The athlete&#39;s preferred unit system.
   * @return measurementPreference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's preferred unit system.")
  @JsonProperty(JSON_PROPERTY_MEASUREMENT_PREFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MeasurementPreferenceEnum getMeasurementPreference() {
    return measurementPreference;
  }


  public void setMeasurementPreference(MeasurementPreferenceEnum measurementPreference) {
    this.measurementPreference = measurementPreference;
  }


  public DetailedAthleteAllOfDto ftp(Integer ftp) {
    
    this.ftp = ftp;
    return this;
  }

   /**
   * The athlete&#39;s FTP (Functional Threshold Power).
   * @return ftp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's FTP (Functional Threshold Power).")
  @JsonProperty(JSON_PROPERTY_FTP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFtp() {
    return ftp;
  }


  public void setFtp(Integer ftp) {
    this.ftp = ftp;
  }


  public DetailedAthleteAllOfDto weight(Float weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * The athlete&#39;s weight.
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's weight.")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWeight() {
    return weight;
  }


  public void setWeight(Float weight) {
    this.weight = weight;
  }


  public DetailedAthleteAllOfDto clubs(List<SummaryClubDto> clubs) {
    
    this.clubs = clubs;
    return this;
  }

  public DetailedAthleteAllOfDto addClubsItem(SummaryClubDto clubsItem) {
    if (this.clubs == null) {
      this.clubs = new ArrayList<>();
    }
    this.clubs.add(clubsItem);
    return this;
  }

   /**
   * The athlete&#39;s clubs.
   * @return clubs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's clubs.")
  @JsonProperty(JSON_PROPERTY_CLUBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SummaryClubDto> getClubs() {
    return clubs;
  }


  public void setClubs(List<SummaryClubDto> clubs) {
    this.clubs = clubs;
  }


  public DetailedAthleteAllOfDto bikes(List<SummaryGearDto> bikes) {
    
    this.bikes = bikes;
    return this;
  }

  public DetailedAthleteAllOfDto addBikesItem(SummaryGearDto bikesItem) {
    if (this.bikes == null) {
      this.bikes = new ArrayList<>();
    }
    this.bikes.add(bikesItem);
    return this;
  }

   /**
   * The athlete&#39;s bikes.
   * @return bikes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's bikes.")
  @JsonProperty(JSON_PROPERTY_BIKES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SummaryGearDto> getBikes() {
    return bikes;
  }


  public void setBikes(List<SummaryGearDto> bikes) {
    this.bikes = bikes;
  }


  public DetailedAthleteAllOfDto shoes(List<SummaryGearDto> shoes) {
    
    this.shoes = shoes;
    return this;
  }

  public DetailedAthleteAllOfDto addShoesItem(SummaryGearDto shoesItem) {
    if (this.shoes == null) {
      this.shoes = new ArrayList<>();
    }
    this.shoes.add(shoesItem);
    return this;
  }

   /**
   * The athlete&#39;s shoes.
   * @return shoes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The athlete's shoes.")
  @JsonProperty(JSON_PROPERTY_SHOES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SummaryGearDto> getShoes() {
    return shoes;
  }


  public void setShoes(List<SummaryGearDto> shoes) {
    this.shoes = shoes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedAthleteAllOfDto detailedAthleteAllOf = (DetailedAthleteAllOfDto) o;
    return Objects.equals(this.followerCount, detailedAthleteAllOf.followerCount) &&
        Objects.equals(this.friendCount, detailedAthleteAllOf.friendCount) &&
        Objects.equals(this.measurementPreference, detailedAthleteAllOf.measurementPreference) &&
        Objects.equals(this.ftp, detailedAthleteAllOf.ftp) &&
        Objects.equals(this.weight, detailedAthleteAllOf.weight) &&
        Objects.equals(this.clubs, detailedAthleteAllOf.clubs) &&
        Objects.equals(this.bikes, detailedAthleteAllOf.bikes) &&
        Objects.equals(this.shoes, detailedAthleteAllOf.shoes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(followerCount, friendCount, measurementPreference, ftp, weight, clubs, bikes, shoes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedAthleteAllOfDto {\n");
    sb.append("    followerCount: ").append(toIndentedString(followerCount)).append("\n");
    sb.append("    friendCount: ").append(toIndentedString(friendCount)).append("\n");
    sb.append("    measurementPreference: ").append(toIndentedString(measurementPreference)).append("\n");
    sb.append("    ftp: ").append(toIndentedString(ftp)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    clubs: ").append(toIndentedString(clubs)).append("\n");
    sb.append("    bikes: ").append(toIndentedString(bikes)).append("\n");
    sb.append("    shoes: ").append(toIndentedString(shoes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

